name: Performance Monitoring

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch: # Allow manual trigger
  deployment_status: # Trigger on deployments

jobs:
  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' || (github.event_name == 'deployment_status' && github.event.deployment_status.state == 'success')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse Audit
        run: |
          lhci autorun --upload.target=temporary-public-storage || echo "Lighthouse audit completed with warnings"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Check Performance Budgets
        run: |
          # Define performance thresholds
          PERFORMANCE_THRESHOLD=90
          ACCESSIBILITY_THRESHOLD=95
          BEST_PRACTICES_THRESHOLD=90
          SEO_THRESHOLD=90
          
          echo "Performance thresholds:"
          echo "Performance: ${PERFORMANCE_THRESHOLD}"
          echo "Accessibility: ${ACCESSIBILITY_THRESHOLD}"
          echo "Best Practices: ${BEST_PRACTICES_THRESHOLD}"
          echo "SEO: ${SEO_THRESHOLD}"

  api-performance:
    name: API Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install -g artillery

      - name: Run API performance tests
        run: |
          # Create a basic Artillery config for API testing
          cat > artillery-config.yml << EOF
          config:
            target: 'https://api.sparrowx.app'
            phases:
              - duration: 60
                arrivalRate: 5
              - duration: 120
                arrivalRate: 10
              - duration: 60
                arrivalRate: 5
          scenarios:
            - name: "Health check"
              requests:
                - get:
                    url: "/health"
            - name: "API endpoints"
              requests:
                - get:
                    url: "/api/v1/health"
          EOF
          
          artillery run artillery-config.yml --output performance-report.json

      - name: Generate performance report
        run: |
          artillery report performance-report.json --output performance-report.html

      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: api-performance-report
          path: |
            performance-report.json
            performance-report.html

  database-performance:
    name: Database Performance Monitoring
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: sparrowx_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: cd backend && npm ci

      - name: Run database migrations
        run: cd backend && npm run db:migrate
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/sparrowx_test

      - name: Seed database with test data
        run: cd backend && npm run db:seed
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/sparrowx_test

      - name: Run database performance tests
        run: |
          cd backend
          # Create a script to test database performance
          cat > db-performance-test.js << 'EOF'
          const { drizzle } = require('drizzle-orm/node-postgres');
          const { Pool } = require('pg');
          const { users, packages, companies } = require('./src/db/schema');
          
          async function testDatabasePerformance() {
            const pool = new Pool({
              connectionString: process.env.DATABASE_URL
            });
            
            const db = drizzle(pool);
            
            console.log('Starting database performance tests...');
            
            // Test 1: Simple select query
            const start1 = Date.now();
            await db.select().from(users).limit(100);
            const end1 = Date.now();
            console.log(`Simple select (100 users): ${end1 - start1}ms`);
            
            // Test 2: Join query
            const start2 = Date.now();
            await db.select().from(users)
              .leftJoin(companies, eq(users.company_id, companies.id))
              .limit(50);
            const end2 = Date.now();
            console.log(`Join query (50 users with companies): ${end2 - start2}ms`);
            
            // Test 3: Complex aggregation
            const start3 = Date.now();
            await db.select({ count: sql`count(*)` }).from(packages);
            const end3 = Date.now();
            console.log(`Count aggregation: ${end3 - start3}ms`);
            
            await pool.end();
            console.log('Database performance tests completed');
          }
          
          testDatabasePerformance().catch(console.error);
          EOF
          
          node db-performance-test.js
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/sparrowx_test

  notify-performance-issues:
    name: Notify Performance Issues
    runs-on: ubuntu-latest
    needs: [lighthouse-audit, api-performance, database-performance]
    if: failure()
    
    steps:
      - name: Notify team of performance issues
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '⚠️ Performance monitoring detected issues. Please check the workflow results.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}